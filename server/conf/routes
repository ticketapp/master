# Home page
GET           /                                   @application.Application.index
GET           /claude                             @application.Application.claude
GET           /googlea30e62044bb92d88.html        @application.Application.googleValidation

GET     /chat                                     @chatContact.ChatContactController.openSocket
GET     /adminChat                                @chatContact.ChatContactController.openAdminSocket

#POST          /signIn                                            @application.Application.signIn
POST          /authenticate/:provider             @application.SocialAuthController.authenticate(provider: String)
GET           /authenticate/:provider             @application.SocialAuthController.authenticate(provider: String)
GET           /signOut                            @application.Application.signOut
#POST          /authenticateByCredentials                         @application.CredentialsAuthController.authenticate
#POST          /signUp                                            @application.SignUpController.signUp

################################## fill database ################################################
GET           /initDatabase                                      @fillDatabase.InitController.init

################################## Admin ################################################
GET            /admin                                           @application.Application.admin

################################# Salable events ######################################################################
GET            /salableEvents                                      @ticketsDomain.TicketController.findSalableEvents()
POST           /salableEvents                                   @ticketsDomain.TicketController.addSalableEvents(eventId: Long)
GET            /salableEvents/containing                        @ticketsDomain.TicketController.findMaybeSalableEventsContaining(pattern: String)
GET            /salableEventsNear                               @ticketsDomain.TicketController.findMaybeSalableEventsNear(geographicPoint: String, offset: Int, numberToReturn: Int)

#################################### Tickets ###############################################
POST            /proposedTickets                                  @ticketsDomain.TicketController.proposeTicket(tariffId: Long, amount: Double, qrCode: String)
POST            /blockedTickets                                   @ticketsDomain.TicketController.blockTicketForUser(tariffId: Long)
POST            /ticketsToSale                                    @ticketsDomain.TicketController.addTicketToSale(qrCode: String, eventId: Long, tariffId: Long)
POST            /acceptedPendingTickets                           @ticketsDomain.TicketController.acceptPendingTicket(pendingTicketId: Long)
POST            /rejectedPendingTickets                           @ticketsDomain.TicketController.rejectPendingTicket(pendingTicketId: Long)
GET             /tickets                                          @ticketsDomain.TicketController.findTicketsWithStatus
GET             /pendingTickets                                   @ticketsDomain.TicketController.findPendingTickets
GET             /boughtBills                                      @ticketsDomain.TicketController.findBoughtBills
GET             /soldBills                                        @ticketsDomain.TicketController.findSoldBills

#################################### tariffs ###############################################
GET             /tariffs                                          @tariffsDomain.TariffController.findTariffsByEventId(eventId: Long)
POST            /tariffs                                          @tariffsDomain.TariffController.save(denomination: String, eventId: Long, startTime: String, endTime: String, price: Double)

################################### Events ###############################################
GET           /events                                            @eventsDomain.EventController.events(offset: Int, numberToReturn: Int, geographicPoint: String)
GET           /events/inInterval/:hourInterval                   @eventsDomain.EventController.eventsInHourInterval(hourInterval: Int, geographicPoint: String, offset: Int, numberToReturn: Int)
GET           /events/passedInInterval/:hourInterval             @eventsDomain.EventController.eventsPassedInHourInterval(hourInterval: Int, geographicPoint: String, offset: Int, numberToReturn: Int)
GET           /events/:id                                        @eventsDomain.EventController.find(id: Long)
POST          /events                                            @eventsDomain.EventController.createEvent
POST          /events/:facebookId                                @eventsDomain.EventController.createEventByFacebookId(facebookId: String)
POST          /followedEvents                                    @eventsDomain.EventController.followEvent(eventId: Long)
DELETE        /followedEvents                                    @eventsDomain.EventController.unfollowEvent(eventId: Long)
GET           /followedEvents                                    @eventsDomain.EventController.getFollowedEvents
PUT           /events                                            @eventsDomain.EventController.update
POST          /events/create/:facebookId                         @eventsDomain.EventController.createEventByFacebookId(facebookId: String)
POST          /events/:eventId/follow                            @eventsDomain.EventController.followEvent(eventId: Long)
POST          /events/:eventId/unfollow                          @eventsDomain.EventController.unfollowEvent(eventId: Long)
GET           /events/followed/                                  @eventsDomain.EventController.getFollowedEvents
GET           /events/:eventId/isFollowed                        @eventsDomain.EventController.isEventFollowed(eventId: Long)
GET           /events/containing/:pattern                        @eventsDomain.EventController.findAllContaining(pattern: String, geographicPoint: String)
GET           /events/city/:pattern                              @eventsDomain.EventController.findByCityPattern(pattern: String)
GET           /events/nearCity/:city                             @eventsDomain.EventController.findNearCity(city: String, numberToReturn: Int, offset: Int)

################################### Artists ##############################################

GET           /artists                                           @artistsDomain.ArtistController.find(numberToReturn: Int, offset: Long)
GET           /artists/:facebookUrl                              @artistsDomain.ArtistController.findByFacebookUrl(facebookUrl: String)
GET           /artists/:facebookUrl/tracks                       @tracksDomain.TrackController.findAllByArtist(facebookUrl: String, numberToReturn: Int, offset: Int)
GET           /artists/byId/:id                                  @artistsDomain.ArtistController.findById(id: Long)
POST          /artists                                           @artistsDomain.ArtistController.create
PUT           /artists                                           @artistsDomain.ArtistController.updateArtist()
POST          /followedArtists/artistId/:artistId                @artistsDomain.ArtistController.followByArtistId(artistId: Long)
DELETE        /followedArtists/artistId/:artistId                @artistsDomain.ArtistController.unfollowByArtistId(artistId: Long)
POST          /followedArtists/facebookId/:facebookId            @artistsDomain.ArtistController.followByFacebookId(facebookId: String)
GET           /followedArtists                                   @artistsDomain.ArtistController.findFollowed
GET           /followedArtists/:artistId                         @artistsDomain.ArtistController.isFollowed(artistId: Long)
GET           /artists/:facebookUrl/events                       @eventsDomain.EventController.findByArtist(facebookUrl: String)
GET           /artists/:artistId/passedEvents                    @eventsDomain.EventController.findPassedByArtist(artistId: Long)
GET           /artists/containing/:pattern                       @artistsDomain.ArtistController.findContaining(pattern: String)
GET           /artists/facebookContaining/:pattern               @artistsDomain.ArtistController.getFacebookArtistsContaining(pattern: String)
DELETE        /eventArtist                                       @artistsDomain.ArtistController.deleteEventRelation(eventId: Long, artistId: Long)
POST          /eventArtist                                       @artistsDomain.ArtistController.saveEventRelation(eventId: Long, artistId: Long)

################################### Places ###############################################
GET           /places                                            @placesDomain.PlaceController.places(geographicPoint: String, numberToReturn: Int, offset: Int)
GET           /places/:id                                        @placesDomain.PlaceController.findById(id: Long)
POST          /followedPlaces/placeId/:placeId                   @placesDomain.PlaceController.followByPlaceId(placeId: Long)
DELETE        /followedPlaces/placeId/:placeId                   @placesDomain.PlaceController.unfollowByPlaceId(placeId: Long)
POST          /followedPlaces/facebookId/:facebookId             @placesDomain.PlaceController.followByFacebookId(facebookId: String)
GET           /followedPlaces/:placeId                           @placesDomain.PlaceController.isFollowed(placeId: Long)
GET           /places/containing/:pattern                        @placesDomain.PlaceController.findPlacesContaining(pattern: String)
POST          /places                                            @placesDomain.PlaceController.createPlace
GET           /places/:placeId/events                            @eventsDomain.EventController.findByPlace(placeId: Long)
GET           /places/:placeId/passedEvents                      @eventsDomain.EventController.findPassedByPlace(placeId: Long)
GET           /places/nearCity/:city                             @placesDomain.PlaceController.findNearCity(city: String, numberToReturn: Int, offset: Int)
GET           /followedPlaces                                    @placesDomain.PlaceController.findFollowed
DELETE        /eventPlace                                        @placesDomain.PlaceController.deleteEventRelation(eventId: Long, placeId: Long)
POST          /eventPlace                                        @placesDomain.PlaceController.saveEventRelation(eventId: Long, placeId: Long)

################################## Organizers ###############################################
GET           /organizers                                        @organizersDomain.OrganizerController.findAllSinceOffset(offset: Long = 0, numberToReturn: Long = 1000)
GET           /organizers/:id                                    @organizersDomain.OrganizerController.findById(id: Long)
POST          /followedOrganizers/organizerId/:organizerId       @organizersDomain.OrganizerController.followByOrganizerId(organizerId: Long)
DELETE        /followedOrganizers/organizerId/:organizerId       @organizersDomain.OrganizerController.unfollowByOrganizerId(organizerId: Long)
POST          /followedOrganizers/facebookId/:facebookId         @organizersDomain.OrganizerController.followByFacebookId(facebookId: String)
GET           /followedOrganizers/:organizerId                   @organizersDomain.OrganizerController.isFollowed(organizerId: Long)
GET           /organizers/containing/:pattern                    @organizersDomain.OrganizerController.findContaining(pattern: String)
POST          /organizers                                        @organizersDomain.OrganizerController.create
GET           /organizers/:organizerId/events                    @eventsDomain.EventController.findByOrganizer(organizerId: Long)
GET           /organizers/:organizerId/passedEvents              @eventsDomain.EventController.findPassedByOrganizer(organizerId: Long)
GET           /organizers/findNearCity/:city                     @organizersDomain.OrganizerController.findNearCity(city: String, numberToReturn: Int, offset: Int)
GET           /organizers/findNearGeoPoint/                      @organizersDomain.OrganizerController.findNear(geographicPoint: String, numberToReturn: Int, offset: Int)
GET           /followedOrganizers                                @organizersDomain.OrganizerController.findFollowed
DELETE        /eventOrganizer                                    @organizersDomain.OrganizerController.deleteEventRelation(eventId: Long, organizerId: Long)
POST          /eventOrganizer                                    @organizersDomain.OrganizerController.saveEventRelation(eventId: Long, organizerId: Long)


################################## Playlists ############################################
GET           /playlists                            @playlistsDomain.PlaylistController.findByUser
POST          /playlists                            @playlistsDomain.PlaylistController.create
PUT           /playlists/:playlistId                @playlistsDomain.PlaylistController.update(playlistId: Long)
DELETE        /playlists/:playlistId                @playlistsDomain.PlaylistController.delete(playlistId: Long)

################################## Genres ############################################
GET           /genres/:genre/artists                @artistsDomain.ArtistController.findByGenre(genre: String, numberToReturn: Int, offset: Int)
GET           /genres/:genre/events                 @eventsDomain.EventController.findByGenre(genre: String, geographicPoint: String, offset: Int, numberToReturn: Int)
GET           /genres/:genre                        @genresDomain.GenreController.isAGenre(genre: String)

################################# Tracks ############################################
POST          /tracks/create                                     @tracksDomain.TrackController.createTrack
GET           /tracks                                            @tracksDomain.TrackController.findAllByArtist(artistFacebookUrl: String, numberToReturn: Int, offset: Int)
GET           /tracks/:artistName/:artistFacebookUrl/:trackTitle        @tracksDomain.SearchTracksController.getYoutubeTracksForArtistAndTrackTitle(artistName: String, artistFacebookUrl: String, trackTitle: String)
GET           /tracks/youtubeTrackInfo/:youtubeId                       @tracksDomain.SearchTracksController.getYoutubeTrackInfo(youtubeId: String)
#GET     /tracks/:trackId/rating                                        @tracks.TrackController.getRatingForUser(trackId: String)
POST          /rating                                                   @tracksDomain.TrackController.upsertRatingForUser
POST          /favorites/:trackId                                       @tracksDomain.TrackController.followTrack(trackId: String)
DELETE        /favorites/:trackId                                       @tracksDomain.TrackController.unfollowTrack(trackId: String)
GET           /favorites                                                @tracksDomain.TrackController.getFollowedTracks
GET           /favorites/:trackId                                       @tracksDomain.TrackController.isTrackFollowed(trackId: String)

################################### City ################################################
GET          /city/:city                                                @addresses.CityController.isACity(city: String)
#
################################### Infos ################################################
#GET     /infos                                                            @Application.Application.infos

################################# Issues ################################################
GET     /issues                                                              @issues.IssueController.issues
POST    /issues                                                              @issues.IssueController.create
GET     /issues/:issueId/comments                                            @issues.IssueController.commentsForIssue(issueId: Long)
POST    /issues/:issueId/comments                                            @issues.IssueController.createComment(issueId: Long)

################################# Tracking ################################################
GET     /sessions                                                            @trackingDomain.TrackingController.findSessions()
GET     /sessions/current                                                    @trackingDomain.TrackingController.findCurrentSessions()
POST    /sessions                                                            @trackingDomain.TrackingController.saveUserSession(screenWidth: Int, screenHeight: Int)
GET     /actions                                                             @trackingDomain.TrackingController.findActionsBySessionId(sessionId: String)
POST    /actions                                                             @trackingDomain.TrackingController.saveUserAction()

################################## Mails ################################################
#GET     /mails                                                            @MailController.mails
#POST    /mails                                                            @MailController.create
#
################################### Users ################################################
#GET     /users                                                            @controllers.UserController.users
#GET     /users/:id                                                        @controllers.UserController.user(id: Long)
#GET     /users/containing/:pattern                                        @controllers.UserController.findUsersContaining(pattern: String)
#GET     /users/:userId/tools                                              @controllers.UserController.findToolsByUserId(userId: Long)
GET           /users/geographicPoint                                         @application.UserController.getUserGeographicPoint
POST          /users/facebookAccessToken/                                    @application.UserController.findFacebookAccessToken
GET           /users/tracksRemoved                                           @application.UserController.getTracksRemoved
POST           /users/isConnected                                           @application.UserController.isConnected

################################## Buy ticket ###########################################
#GET           /buyTicket                                                     @others.TicketController.buyTicket

################################## Accounting ###########################################
#GET     /orgaPayment       @controllers.AccountingController.orgaPayment
#GET     /totalToPay       @controllers.AccountingController.totalToPay
#GET     /account708       @controllers.AccountingController.account708
#GET     /account413       @controllers.AccountingController.account413
#GET     /account60       @controllers.AccountingController.account60
#GET     /account63       @controllers.AccountingController.account63
#GET     /account627       @controllers.AccountingController.account627
#GET     /account623       @controllers.AccountingController.account623
#GET     /account626       @controllers.AccountingController.account626

################################## Upload #################################################
#POST    /upload        @controllers.Admin.upload


# Map static resources from the /public folder to the /assets URL path
GET           /assets/*file                                                  @controllers.Assets.at(path="/public", file)


#GET /*any@Application.Application.index(any)

