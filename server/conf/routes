# Home page
GET           /                                   @application.Application.index
GET           /claude                             @application.Application.claude
GET           /googlea30e62044bb92d88.html        @application.Application.googleValidation

GET           /chatContact                        @chatContact.MessagesController.openSocket

#POST          /signIn                                            @application.Application.signIn
POST          /authenticate/:provider             @application.SocialAuthController.authenticate(provider: String)
GET           /authenticate/:provider             @application.SocialAuthController.authenticate(provider: String)
GET           /signOut                            @application.Application.signOut
#POST          /authenticateByCredentials                         @application.CredentialsAuthController.authenticate
#POST          /signUp                                            @application.SignUpController.signUp

################################## fill database ################################################
GET           /initDatabase                                      @fillDatabase.InitController.init

################################## Admin ################################################
GET            /admin                                           @application.Application.admin

################################# Salable events ######################################################################
GET            /salableEvents                                   @ticketsDomain.TicketController.findSalableEvents()
POST           /salableEvents                                   @ticketsDomain.TicketController.addSalableEvents(eventId: Long)
GET            /salableEventsContaining                         @ticketsDomain.TicketController.findMaybeSalableEventsByContaining(pattern: String)

#################################### Tickets ###############################################
POST            /proposed                                         @ticketsDomain.TicketController.proposeTicket(tariffId: Long, amount: Double, qrCode: String)
POST            /blockedTicket                                    @ticketsDomain.TicketController.blockTicketForUser(tariffId: Long)
POST            /ticketToSale                                     @ticketsDomain.TicketController.addTicketToSale(qrCode: String, eventId: Long, tariffId: Long)
POST            /acceptedPendingTicket                            @ticketsDomain.TicketController.acceptPendingTicket(pendingTicketId: Long)
POST            /rejectedPendingTicket                            @ticketsDomain.TicketController.rejectPendingTicket(pendingTicketId: Long)
GET             /tickets                                          @ticketsDomain.TicketController.findTicketsWithStatus
GET             /pending                                          @ticketsDomain.TicketController.findPendingTickets
GET             /bills/bought                                     @ticketsDomain.TicketController.findBoughtBills
GET             /bills/sold                                       @ticketsDomain.TicketController.findSoldBills

#################################### tariffs ###############################################
GET             /tariffs                                          @tariffsDomain.TariffController.findTariffsByEventId(eventId: Long)
POST            /tariffs                                          @tariffsDomain.TariffController.save(denomination: String, eventId: Long, startTime: String, endTime: String, price: Double)

################################### Events ###############################################
GET           /events                                            @eventsDomain.EventController.events(offset: Int, numberToReturn: Int, geographicPoint: String)
GET           /events/inInterval/:hourInterval                   @eventsDomain.EventController.eventsInHourInterval(hourInterval: Int, geographicPoint: String, offset: Int, numberToReturn: Int)
GET           /events/passedInInterval/:hourInterval             @eventsDomain.EventController.eventsPassedInHourInterval(hourInterval: Int, geographicPoint: String, offset: Int, numberToReturn: Int)
GET           /events/:id                                        @eventsDomain.EventController.find(id: Long)
POST          /events/create                                     @eventsDomain.EventController.createEvent
POST          /events/create/:facebookId                         @eventsDomain.EventController.createEventByFacebookId(facebookId: String)
POST          /events/:eventId/follow                            @eventsDomain.EventController.followEvent(eventId: Long)
POST          /events/:eventId/unfollow                          @eventsDomain.EventController.unfollowEvent(eventId: Long)
GET           /events/followed/                                  @eventsDomain.EventController.getFollowedEvents
GET           /events/:eventId/isFollowed                        @eventsDomain.EventController.isEventFollowed(eventId: Long)
GET           /events/containing/:pattern                        @eventsDomain.EventController.findAllContaining(pattern: String, geographicPoint: String)
GET           /events/city/:pattern                              @eventsDomain.EventController.findByCityPattern(pattern: String)
GET           /events/nearCity/:city                             @eventsDomain.EventController.findNearCity(city: String, numberToReturn: Int, offset: Int)

################################### Artists ##############################################

GET           /artists/since                                     @artistsDomain.ArtistController.artistsSinceOffset(numberToReturn: Int, offset: Long)
GET           /artists/:facebookUrl                              @artistsDomain.ArtistController.artistByFacebookUrl(facebookUrl: String)
GET           /artists/:facebookUrl/tracks                       @tracksDomain.TrackController.findAllByArtist(facebookUrl: String, numberToReturn: Int, offset: Int)
GET           /artists/byId/:id                                  @artistsDomain.ArtistController.artist(id: Long)
POST          /artists/createArtist                              @artistsDomain.ArtistController.createArtist
POST          /artists/:artistId/followByArtistId                @artistsDomain.ArtistController.followArtistByArtistId(artistId: Long)
POST          /artists/:artistId/unfollowArtistByArtistId        @artistsDomain.ArtistController.unfollowArtistByArtistId(artistId: Long)
POST          /artists/:facebookId/followByFacebookId            @artistsDomain.ArtistController.followArtistByFacebookId(facebookId: String)
GET           /artists/followed/                                 @artistsDomain.ArtistController.getFollowedArtists
GET           /artists/:artistId/isFollowed                      @artistsDomain.ArtistController.isArtistFollowed(artistId: Long)
GET           /artists/:facebookUrl/events                       @eventsDomain.EventController.findByArtist(facebookUrl: String)
GET           /artists/:artistId/passedEvents                    @eventsDomain.EventController.findPassedByArtist(artistId: Long)
GET           /artists/containing/:pattern                       @artistsDomain.ArtistController.findArtistsContaining(pattern: String)
GET           /artists/facebookContaining/:pattern               @artistsDomain.ArtistController.getFacebookArtistsContaining(pattern: String)

################################### Places ###############################################
GET           /places                                            @placesDomain.PlaceController.places(geographicPoint: String, numberToReturn: Int, offset: Int)
GET           /places/:id                                        @placesDomain.PlaceController.findById(id: Long)
POST          /places/:placeId/followByPlaceId                   @placesDomain.PlaceController.followPlaceByPlaceId(placeId: Long)
POST          /places/:placeId/unfollowPlaceByPlaceId            @placesDomain.PlaceController.unfollowPlaceByPlaceId(placeId: Long)
POST          /places/:facebookId/followByFacebookId             @placesDomain.PlaceController.followPlaceByFacebookId(facebookId: String)
GET           /places/:placeId/isFollowed                        @placesDomain.PlaceController.isPlaceFollowed(placeId: Long)
GET           /places/containing/:pattern                        @placesDomain.PlaceController.findPlacesContaining(pattern: String)
POST          /places/create                                     @placesDomain.PlaceController.createPlace
GET           /places/:placeId/events                            @eventsDomain.EventController.findByPlace(placeId: Long)
GET           /places/:placeId/passedEvents                      @eventsDomain.EventController.findPassedByPlace(placeId: Long)
GET           /places/nearCity/:city                             @placesDomain.PlaceController.findPlacesNearCity(city: String, numberToReturn: Int, offset: Int)
GET           /places/followed/                                  @placesDomain.PlaceController.getFollowedPlaces

################################## Organizers ###############################################
GET           /organizers                                        @organizersDomain.OrganizerController.findAllSinceOffset(offset: Long = 0, numberToReturn: Long = 1000)
GET           /organizers/:id                                                @organizersDomain.OrganizerController.findById(id: Long)
POST          /organizers/:organizerId/followByOrganizerId                   @organizersDomain.OrganizerController.followOrganizerByOrganizerId(organizerId: Long)
POST          /organizers/:organizerId/unfollowOrganizerByOrganizerId        @organizersDomain.OrganizerController.unfollowOrganizerByOrganizerId(organizerId: Long)
POST          /organizers/:facebookId/followByFacebookId                     @organizersDomain.OrganizerController.followOrganizerByFacebookId(facebookId: String)
GET           /organizers/:organizerId/isFollowed                @organizersDomain.OrganizerController.isOrganizerFollowed(organizerId: Long)
GET           /organizers/containing/:pattern                    @organizersDomain.OrganizerController.findOrganizersContaining(pattern: String)
POST          /organizers/create                                 @organizersDomain.OrganizerController.createOrganizer
GET           /organizers/:organizerId/events                    @eventsDomain.EventController.findByOrganizer(organizerId: Long)
GET           /organizers/:organizerId/passedEvents              @eventsDomain.EventController.findPassedByOrganizer(organizerId: Long)
GET           /organizers/findNearCity/:city                     @organizersDomain.OrganizerController.findNearCity(city: String, numberToReturn: Int, offset: Int)
GET           /organizers/findNearGeoPoint/                      @organizersDomain.OrganizerController.findOrganizersNear(geographicPoint: String, numberToReturn: Int, offset: Int)
GET           /organizers/followed/                              @organizersDomain.OrganizerController.getFollowedOrganizers
#
################################## Playlists ############################################
GET           /playlists                            @playlistsDomain.PlaylistController.findByUser
POST          /playlists                            @playlistsDomain.PlaylistController.create
PUT           /playlists/:playlistId                @playlistsDomain.PlaylistController.update(playlistId: Long)
DELETE        /playlists/:playlistId                @playlistsDomain.PlaylistController.delete(playlistId: Long)
#
################################## Genres ############################################
GET           /genres/:genre/artists                @artistsDomain.ArtistController.artistsByGenre(genre: String, numberToReturn: Int, offset: Int)
GET           /genres/:genre/events                 @eventsDomain.EventController.findByGenre(genre: String, geographicPoint: String, offset: Int, numberToReturn: Int)
GET           /genres/:genre                        @genresDomain.GenreController.isAGenre(genre: String)

################################# Tracks ############################################
POST          /tracks/create                                     @tracksDomain.TrackController.createTrack
GET           /tracks                                            @tracksDomain.TrackController.findAllByArtist(artistFacebookUrl: String, numberToReturn: Int, offset: Int)
GET           /tracks/:artistName/:artistFacebookUrl/:trackTitle        @tracksDomain.SearchTracksController.getYoutubeTracksForArtistAndTrackTitle(artistName: String, artistFacebookUrl: String, trackTitle: String)
GET           /tracks/youtubeTrackInfo/:youtubeId                       @tracksDomain.SearchTracksController.getYoutubeTrackInfo(youtubeId: String)
#GET     /tracks/:trackId/rating                                        @tracks.TrackController.getRatingForUser(trackId: String)
POST          /tracks/rating                                            @tracksDomain.TrackController.upsertRatingForUser
POST          /tracks/:trackId/addToFavorites                           @tracksDomain.TrackController.followTrack(trackId: String)
POST          /tracks/:trackId/removeFromFavorites                      @tracksDomain.TrackController.unfollowTrack(trackId: String)
GET           /tracks/favorites                                         @tracksDomain.TrackController.getFollowedTracks
GET           /tracks/:trackId/isFollowed                               @tracksDomain.TrackController.isTrackFollowed(trackId: String)

################################### City ################################################
GET          /city/:city                                                @addresses.CityController.isACity(city: String)
#
################################### Infos ################################################
#GET     /infos                                                            @Application.Application.infos

################################# Issues ################################################
GET     /issues                                                              @issues.IssueController.issues
POST    /issues                                                              @issues.IssueController.create
GET     /issues/:issueId/comments                                            @issues.IssueController.commentsForIssue(issueId: Long)
POST    /issues/:issueId/comments                                            @issues.IssueController.createComment(issueId: Long)

################################# Tracking ################################################
GET     /sessions                                                            @trackingDomain.TrackingController.findSessions()
GET     /sessions/current                                                    @trackingDomain.TrackingController.findCurrentSessions()
POST    /sessions                                                            @trackingDomain.TrackingController.saveUserSession(screenWidth: Int, screenHeight: Int)
GET     /actions                                                             @trackingDomain.TrackingController.findActionsBySessionId(sessionId: String)
POST    /actions                                                             @trackingDomain.TrackingController.saveUserAction()

################################## Mails ################################################
#GET     /mails                                                            @MailController.mails
#POST    /mails                                                            @MailController.create
#
################################### Users ################################################
#GET     /users                                                            @controllers.UserController.users
#GET     /users/:id                                                        @controllers.UserController.user(id: Long)
#GET     /users/containing/:pattern                                        @controllers.UserController.findUsersContaining(pattern: String)
#GET     /users/:userId/tools                                              @controllers.UserController.findToolsByUserId(userId: Long)
GET           /users/geographicPoint                                         @application.UserController.getUserGeographicPoint
#GET     /users/facebookAccessToken/                                       @controllers.UserController.findFacebookAccessToken
GET           /users/tracksRemoved                                           @application.UserController.getTracksRemoved
GET           /users/isConnected                                           @application.UserController.isConnected

################################## Buy ticket ###########################################
#GET           /buyTicket                                                     @others.TicketController.buyTicket

################################## Accounting ###########################################
#GET     /orgaPayment       @controllers.AccountingController.orgaPayment
#GET     /totalToPay       @controllers.AccountingController.totalToPay
#GET     /account708       @controllers.AccountingController.account708
#GET     /account413       @controllers.AccountingController.account413
#GET     /account60       @controllers.AccountingController.account60
#GET     /account63       @controllers.AccountingController.account63
#GET     /account627       @controllers.AccountingController.account627
#GET     /account623       @controllers.AccountingController.account623
#GET     /account626       @controllers.AccountingController.account626

################################## Upload #################################################
#POST    /upload        @controllers.Admin.upload


# Map static resources from the /public folder to the /assets URL path
GET           /assets/*file                                                  @controllers.Assets.at(path="/public", file)


#GET /*any@Application.Application.index(any)

